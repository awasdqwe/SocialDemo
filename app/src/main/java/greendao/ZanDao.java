package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ljc.socialdemo.db.dao.Zan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZAN".
*/
public class ZanDao extends AbstractDao<Zan, Long> {

    public static final String TABLENAME = "ZAN";

    /**
     * Properties of entity Zan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Header = new Property(1, String.class, "header", false, "HEADER");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property DiscoveId = new Property(3, Long.class, "discoveId", false, "DISCOVE_ID");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    }


    public ZanDao(DaoConfig config) {
        super(config);
    }
    
    public ZanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZAN\" (" + //
                "\"NAME\" TEXT NOT NULL ," + // 0: name
                "\"HEADER\" TEXT," + // 1: header
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"DISCOVE_ID\" INTEGER," + // 3: discoveId
                "\"USER_ID\" INTEGER," + // 4: userId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Zan entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getName());
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(2, header);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        Long discoveId = entity.getDiscoveId();
        if (discoveId != null) {
            stmt.bindLong(4, discoveId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Zan entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getName());
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(2, header);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        Long discoveId = entity.getDiscoveId();
        if (discoveId != null) {
            stmt.bindLong(4, discoveId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public Zan readEntity(Cursor cursor, int offset) {
        Zan entity = new Zan( //
            cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // header
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // discoveId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Zan entity, int offset) {
        entity.setName(cursor.getString(offset + 0));
        entity.setHeader(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiscoveId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Zan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Zan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Zan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
